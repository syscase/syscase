=========================
Installation instructions
=========================

  (See README for the general instruction manual.)

1) Linux (x86)
--------------

Compile the program with:

$ make

You can starting using the fuzzer without installation, but it is also possible
to install it with:

# make install

There are no special dependencies to speak of; you will need GNU make and a
working compiler (gcc or clang). Some of the optional scripts in experimental/*
may depend on bash, gdb, and similar basic tools.

2) OpenBSD, FreeBSD, NetBSD (x86)
---------------------------------

Compile with GNU make:

$ gmake

Note that BSD make will *not* work; if you do not have gmake on your system,
please install it first. As on Linux, you can use the fuzzer itself without
installation, or install it with:

# gmake install

Keep in mind that if you are using csh as your shell, the syntax of some of the
shell commands given in the README and other docs will be different.

3) MacOS X (x86)
----------------

Follow the instructions for Linux. Of course, you need Xcode installed to
compile this or any other program.

Note that 'gcc' is just a wrapper for clang on MacOS X, so you should compile
everything with afl-clang. If you have GCC installed, you can use the afl-gcc
wrappers, but specify AFL_CC or AFL_CXX to point to the real GCC binary.

At this point, only 64-bit compilation is supported; given that all modern
MacOS X boxes are 64-bit, and that 32-bit mode needs a fair amount of work due
to the idiosyncrasies of the platform, this is unlikely to change.

4) Linux (ARMv7)
----------------

ARMv7 is not officially supported. You can try an unofficial patch, but
expect to run into some issues. Please refer to experimental/arm_support/README
for compilation and usage tips.

5) Other platforms
------------------

Platforms other than x86 and ARMv7 will not work and support for them is not
currently planned (due to limited practical benefits and zero user interest).
The same goes for Cygwin.

Getting the tool to work on non-POSIX-compliant unix systems may be doable,
but will probably require more effort than its worth; try it at your own
risk :-)

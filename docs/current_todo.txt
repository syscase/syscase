====
TODO
====

  (See README for the general instruction manual)

Here's the list of stuff I want to implement in afl:

  - Better offloading of local fuzzing work between parallel instances?

  - Test 8192 as an "interesting" integer,

  - Investigate x86 hardware branch tracing via the perf tracing API,

  - More test cases (see testcases/wishlist.txt).

  - Detect multi-thread / execve() binaries and warn user about trade-offs?

  - Special-cased expansion for strcmp() & similar functions to replace
    them with an instrumented loop - on a trial basis.

  - Perhaps a rewrite of the fork server code in C that gets precompiled
    with -S and then appended alongside with the instrumentation.

  - A second part of Jann's fork server patch, which allows us to skip setup
    steps for certain slow programs.

  - A pluggable version of fuzz_one(), so that people can write syntax-aware
    mutators or filters more easily.

  - Perhaps afl-fuzz.c broken into several smaller files for aesthetic
    purposes.

  - Proper support for threads, with prev_loc traced on a per-tid basis?
    (This may be slow.)

  - Support for DynamoRIO (or pin) for closed-source instrumentation in
    non-obfuscated binaries.

I'm not particularly sold on adding more exotic output modes, for example to
send data to a TCP or UDP socket, or serve it off one. Ditto for supporting
"remote" execution with execution code phoned back in by a harness. It's
probably more effort than it's worth, because network services have so many
different process models, etc, and you don't even necessarily know where
to watch for crashes or how to reset them to initial state.

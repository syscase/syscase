=========================
Tips for parallel fuzzing
=========================

  (See README for the general instruction manual)

1) Introduction
---------------

Every copy of afl-fuzz will take up one full CPU core. This means that on an
n-core system, you can safely run up to n different fuzzing jobs with virtually
no performance hit.

In fact, depending on the design of the fuzzed program, you may be able run one
fuzzer per every virtual core on HT-enabled system at very little cost.

When targeting multiple unrelated binaries, it is perfectly fine to run fully
separate instances of afl-fuzz - be it on a single machine or across a large
fleet. The picture gets more complicated when you want to have multiple fuzzers
hammering a common target: if a hard-to-hit but interesting test case is
synthesized by one fuzzer, the remaining instances will not be able to use that
input to guide their work.

To help with this problem, afl-fuzz offers a simple way to synchronize test
cases on the fly.

2) Single-system parallelization
--------------------------------

If you wish to parallelize a single job across multiple cores on a single
system, simply create a new, empty output directory that will be shared by all
the instances of afl-fuzz; and then asign a unique alphanumeric ID to every
instance, passing it in the -S parameter when invoking the tool, e.g.:

$ ./afl-fuzz -o /path/to/sync_dir -S fuzzer01 [...other params...]

This syntax will cause the fuzzer to write its output to a directory called:

  /path/to/sync_dir/fuzzer01/

In this setup, each instance will periodically rescan all entries in
/path/to/sync_dir to find outputs discovered by other jobs and use them if they
result in any locally new coverage.

Note that -S also implies -d and makes the fuzzer proceed straight to
non-deterministic tweaks. You probably want to run one (and just one) of the
instances with the -D parameter to keep the deterministic checks. Enabling
this one more than one instance would be a waste of CPU time.

Of course, it is important to assign every fuzzer a different ID. Care should
be exercised when using the -f option, too: two processes competing to write
to the same file is bad news.

3) Multi-system parallelization
-------------------------------

The basic operating principle for multi-system parallelization is similar to
the mechanism explained in section 2, except that you need to write a simple
script that performs two actions:

  - Uses SSH with authorized_keys to connect to every machine and retrieve
    a tar archive of the /path/to/sync_dir/<fuzzer_id>/queue/ directories for
    every <fuzzer_id> local to the machine, e.g.:

    for s in {1..10}; do
      ssh user@host${s} "tar -czf - sync/host${s}_fuzzid*/queue" >host${s}.tgz
    done

  - Distributes and unpacks these files on all the remaining machines, e.g.:

    for s in {1..10}; do
      for d in {1..10}; do
        test "$s" = "$d" && continue
        ssh user@host${d} 'tar -kxzf -' <host${s}.tgz
      done
    done

    For large fleets, you'd want to consolidate tarballs for each host to
    minimize the number of connections needed.

There is an example of such a script in experimental/distributed_fuzzing/.

When developing custom code, there are several optimizations to keep in mind:

  - The synchronization does not have to happen very often; running the
    task every 30 minutes or so may be pefectly fine.

  - There is no need to synchronize crashes/ or hangs/; you only need to
    copy over queue/*.

  - It is not necessary (and not advisable!) to overwrite existing files;
    the -k option in tar is a good choice.

  - There is no need to fetch directories for fuzzers that are not running
    locally on a particular machine, and were simply copied over to that
    system during earlier runs.

It is *not* advisable to skip the synchronization script and run the fuzzers
directly on a network filesystem; unexpected latency and unkillable I/O
wait processes can mess things up.

4) Closing remarks
------------------

It is perhaps worth noting that all of the following is permitted:

  - Running some of the synchronized fuzzers with different (but related)
    target binaries. For example, simultaneously stress-testing several
    different JPEG parsers can have synergistic effects and improve
    the overall coverage.

  - Having some of the fuzzers invoke the binary in different ways.
    For example, 'djpeg' supports several DCT modes, configurable with
    a command-line flag. In some scenarios, this can slightly improve
    coverage.

  - Perhaps least convincingly, running the synchronized fuzzers with
    different starting test cases (e.g., progressive and standard JPEG).
    The synchronization mechanism ensures that the test sets will get
    fairly homogenous over time, but it introduces some initial variability.

Oh, one more thing: on the status screen of every fuzzer, you can keep track
of the number of paths imported from other instances. The figure replaces the
less interesting "latent" indicator in the bottom right corner of the screen.
